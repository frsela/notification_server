/* jshint node: true */
/**
 * PUSH Notification server
 * (c) Telefonica Digital, 2012 - All rights reserved
 * License: GNU Affero V3 (see LICENSE file)
 * Fernando Rodríguez Sela <frsela@tid.es>
 * Guillermo Lopez Leal <gll@tid.es>
 */

var numCPUs = require('os').cpus().length;

/******************* Servers to run on this machine ********************/
/**
 * Put to true what you want to run
 */
exports.servers = {
    NS_AS: true,
    NS_Monitor: true,
    NS_UA_WS: true,
    NS_UA_UDP: true,
    NS_WakeUp_Checker: true
};

////////////////////////////////////////////////////////////////////////
// Common configuration parameters
////////////////////////////////////////////////////////////////////////

/********************* Constants********************************************/
exports.consts = {
    PREPRODUCTION_MODE: true,
    MOBILENETWORK_CACHE: false,


    /*
     * This is the Key and the Certificate of the server. Should be shared
     * between all frontends that receive connections (NS_AS, NS_UA_WS).
     * Self-signed: http://stackoverflow.com/questions/9519707/can-nodejs-generate-ssl-certificates
     */

    caDir: '../examples/ssl_cert/cas',
    key: '../examples/ssl_cert/server-key.pem',
    cert: '../examples/ssl_cert/server-cert.pem',

    /**
     * Public base URL to receive notifications. This will be the base to
     * append the /notify/12345abcdef… URL
     */
    publicBaseURL: 'https://localhost:8081/v1',

    /**
     * This must be shared between all your NS_UA_WS frontends.
     * This is used to verify if the token to register a UA comes from
     * this server
     * THIS MUST BE CHANGED ON PRODUCTION
     */
    cryptokey: '12345678901234567890'
};

/********************* Logger parameters ***********************************/
var loglevel = require('./common/constants.js').loglevels;
exports.logger = {
    /**
     * Log levels:
     *
     * # NONE: Log disabled
     * # DEBUG: Very detailed information about all the things the server is doing
     * # INFO: General information about the things the server is doing
     * # ERROR: Error detected, but the server can continue working
     * # ALERT: Error detected but not directly on this process, so this is a
     *          notification that should be investigated
     * # NOTIFY: General notifications, ie. New connections
     * # CRITICAL: When a CRITICAL trace is sent the process will be STOPPED
     */
    LOGLEVEL: loglevel.DEBUG | loglevel.INFO | loglevel.ERROR | loglevel.CRITICAL | loglevel.ALERT | loglevel.NOTIFY | loglevel.ALARM,
    CONSOLEOUTPUT: 1,
    BASE_PATH: '/var/log/push_server/',
    ALARM: '/var/log/push_server/alarms.log'

};

/********************* Common Queue ***********************************/
/**
 * Choose your host, port and other self-explanatory options
 * Heartbeat in seconds. 0 => No heartbeat
 */
exports.queue = [{
    host: 'localhost',
    port: 5672, //AMQP default port
    login: 'guest',
    password: 'guest',
    heartbeat: 1200
}, {
    host: 'localhost',
    port: 5672, //AMQP default port
    login: 'guest',
    password: 'guest',
    heartbeat: 1200
}];

/********************* Database configuration *************************/
exports.ddbbsettings = {
    machines: [
        ['localhost', 27017]
    ],
    ddbbname: 'push_notification_server'
};

////////////////////////////////////////////////////////////////////////
//Different configurations for the servers
////////////////////////////////////////////////////////////////////////

/********************* NS_AS *****************************************/
exports.NS_AS = {
    logfile: 'NS_AS.log',

    /**
     * Number of processes which shall run in parallel
     */
    numProcesses: numCPUs,

    /**
     * Binding interface to listen to
     */
    interface: {
        ip: '0.0.0.0',
        port: 8081,
        ssl: true
    }
};

/********************* NS_MSG_monitor ********************************/

exports.NS_Monitor = {
    logfile: 'NS_Monitor.log',

    /**
     * Milliseconds to retry to send the UDP packets to wakeup a device
     */
    retryTime: 300000000
};

/********************* NS_UA_WS **************************************/

exports.NS_UA_WS = {
    logfile: 'NS_UA_WS.log',

    /**
     * Number of processes which shall run in parallel
     */
    numProcesses: numCPUs,

    /**
     * Maximum size for a WebSocket message (20 KiB)
     */
    MAX_MESSAGE_SIZE: 0x5000, //20480 bytes

    /**
     * Binding interfaces and ports
     * [ iface, port, ssl ]
     */
    interface: {
        ip: '0.0.0.0',
        port: 8080,
        ssl: true
    },
    statsInterface: {
        ip: '0.0.0.0',
        port: 8222,
        ssl: true
    },

    /**
     * Websocket configuration
     * @see https://github.com/Worlize/WebSocket-Node/blob/master/lib/WebSocketServer.js
     * Be sure to know exactly what are you changing. Short keepaliveIntervals
     * on 3G networks causes a lot of signalling and also dropping too many connections
     * because timeouts on handset status change time.
     * It's disabled because we do not want to track if we have an open connection
     * with a client. It's the client who needs to keep track of it (with a PING message)
     */
    websocket_params: {
        keepalive: false, // By default, currently the KA messages will be managed by the client side
        keepaliveInterval: 300000 // 5 minutes
    }
};

/********************* NS_UA_UDP *************************************/

exports.NS_UA_UDP = {
    logfile: 'NS_UA_UDP.log',
    /* Paths to files */
    ca: null,
    key: null,
    cert: null,
    WAKEUP_URL: 'https://wakeup.tefdigital.com/wakeup/v1'
};

/** NS_WakeUp_Checker **/
exports.NS_WakeUp_Checker = {
    logfile: 'NS_WakeUp_Checker.log',
    /* Paths to files */
    ca: null,
    key: null,
    cert: null,
    GLOBAL_WAKEUP_API_CHECK: 'https://wakeup.tefdigital.com/netinfo/v1',

    checkPeriod: 180000
};

/********************* NS start.js ***********************************/

exports.NS = {
    logfile: 'NS.log'
};
